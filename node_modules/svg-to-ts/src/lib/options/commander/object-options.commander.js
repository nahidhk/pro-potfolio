"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigPath = exports.setupObjectOptionsCommander = void 0;
const commander_1 = __importDefault(require("commander"));
const packgeJSON = __importStar(require("../../../../package.json"));
const code_snippet_generators_1 = require("../../generators/code-snippet-generators");
const default_object_conversion_options_1 = require("../default-options/default-object-conversion-options");
const setupObjectOptionsCommander = () => {
    const collect = (value, previous) => previous.concat([value]);
    commander_1.default
        .version(packgeJSON.version)
        .option('--config <string>', 'path to the configuration file')
        .option('--tsx <boolean>', 'generate tsx files', false)
        .option('-d --delimiter <Delimiter>', `delimiter which is used to generate the types and name properties (${Object.values(code_snippet_generators_1.Delimiter).join(',')})`, default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.delimiter)
        .option('-s --srcFiles <value>', 'name of the source directory', collect, default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.srcFiles)
        .option('-o --outputDirectory <string>', 'name of the output directory', default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.outputDirectory)
        .option('--objectName <string>', 'name of the exported object', default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.objectName)
        .option('--typeName <string>', 'name of type object to generate', default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.typeName)
        .option('-f --fileName <string>', 'name of the generated file', default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.fileName)
        .option('--svgoConfig <any>', 'Path to svgo configuration JSON or inline svgo configuration object')
        .option('--verbose <boolean>', 'Specifies if a verbose log message should be printed or not', default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.verbose)
        .parse(process.argv);
};
exports.setupObjectOptionsCommander = setupObjectOptionsCommander;
const getConfigPath = () => commander_1.default.config;
exports.getConfigPath = getConfigPath;
//# sourceMappingURL=object-options.commander.js.map