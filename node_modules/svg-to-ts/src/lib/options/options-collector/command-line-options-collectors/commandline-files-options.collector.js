"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectCommandLineFileOptions = void 0;
const commander_1 = __importDefault(require("commander"));
const svg_optimization_1 = require("../../../helpers/svg-optimization");
const default_files_conversion_options_1 = require("../../default-options/default-files-conversion-options");
const command_line_collector_helpers_1 = require("./command-line-collector.helpers");
const collectCommandLineFileOptions = () => __awaiter(void 0, void 0, void 0, function* () {
    let { tsx, delimiter, barrelFileName, interfaceName, enumName, outputDirectory, prefix, typeName, generateType, generateTypeObject, generateEnum, modelFileName, iconsFolderName, additionalModelOutputPath, exportCompleteIconSet, completeIconSetName, compilationOutput, compileSources, verbose, } = commander_1.default;
    let svgoConfig = commander_1.default.svgoConfig;
    // Parse boolean values
    tsx = (0, command_line_collector_helpers_1.toBoolean)(tsx, default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.tsx);
    generateType = (0, command_line_collector_helpers_1.toBoolean)(generateType, default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.generateType);
    generateTypeObject = (0, command_line_collector_helpers_1.toBoolean)(generateTypeObject, default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.generateTypeObject);
    exportCompleteIconSet = (0, command_line_collector_helpers_1.toBoolean)(exportCompleteIconSet, default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.exportCompleteIconSet);
    compileSources = (0, command_line_collector_helpers_1.toBoolean)(compileSources, default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.compileSources);
    verbose = (0, command_line_collector_helpers_1.toBoolean)(verbose, default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.verbose);
    // Because of commander adding default value to params
    // See: https://stackoverflow.com/questions/30238654/commander-js-collect-multiple-options-always-include-default
    let srcFiles = commander_1.default.srcFiles;
    if (srcFiles.length === 0) {
        srcFiles = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.srcFiles;
    }
    svgoConfig = yield (0, svg_optimization_1.getSvgoConfig)(svgoConfig);
    return {
        tsx,
        delimiter,
        interfaceName,
        srcFiles,
        outputDirectory,
        prefix,
        typeName,
        enumName,
        generateType,
        generateTypeObject,
        generateEnum,
        modelFileName,
        iconsFolderName,
        exportCompleteIconSet,
        completeIconSetName,
        svgoConfig,
        additionalModelOutputPath,
        compileSources,
        compilationOutput,
        barrelFileName,
        verbose,
    };
});
exports.collectCommandLineFileOptions = collectCommandLineFileOptions;
//# sourceMappingURL=commandline-files-options.collector.js.map