"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectCommandLineObjectOptions = void 0;
const commander_1 = __importDefault(require("commander"));
const svg_optimization_1 = require("../../../helpers/svg-optimization");
const default_object_conversion_options_1 = require("../../default-options/default-object-conversion-options");
const command_line_collector_helpers_1 = require("./command-line-collector.helpers");
const collectCommandLineObjectOptions = () => __awaiter(void 0, void 0, void 0, function* () {
    let { tsx, objectName, delimiter, fileName, outputDirectory, verbose, generateType, typeName } = commander_1.default;
    let svgoConfig = commander_1.default.svgoConfig;
    generateType = (0, command_line_collector_helpers_1.toBoolean)(generateType, default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.generateType);
    // Parse boolean values
    verbose = (0, command_line_collector_helpers_1.toBoolean)(verbose, default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.verbose);
    let srcFiles = commander_1.default.srcFiles;
    if (srcFiles.length === 0) {
        srcFiles = default_object_conversion_options_1.DEFAULT_OBJECT_CONVERSION_OPTIONS.srcFiles;
    }
    svgoConfig = yield (0, svg_optimization_1.getSvgoConfig)(svgoConfig);
    return {
        tsx,
        delimiter,
        srcFiles,
        outputDirectory,
        svgoConfig,
        fileName,
        objectName,
        verbose,
        generateType,
        typeName,
    };
});
exports.collectCommandLineObjectOptions = collectCommandLineObjectOptions;
//# sourceMappingURL=commandline-object-options.collector.js.map