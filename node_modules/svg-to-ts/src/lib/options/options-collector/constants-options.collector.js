"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConstantConversionOptions = void 0;
const logger_1 = require("../../helpers/logger");
const commandline_consts_options_collector_1 = require("./command-line-options-collectors/commandline-consts-options.collector");
const config_file_constants_options_collector_1 = require("./config-file-options-collector/config-file-constants-options.collector");
const getConstantConversionOptions = () => __awaiter(void 0, void 0, void 0, function* () {
    const configOptions = yield (0, config_file_constants_options_collector_1.collectConfigFileConstantOptions)();
    if (configOptions) {
        return configOptions;
    }
    logger_1.Logger.verboseInfo('No configuration found in package.json nor rc file - checking for arguments and applying defaults (see --help)');
    return (0, commandline_consts_options_collector_1.collectCommandLineConstantOptions)();
});
exports.getConstantConversionOptions = getConstantConversionOptions;
//# sourceMappingURL=constants-options.collector.js.map