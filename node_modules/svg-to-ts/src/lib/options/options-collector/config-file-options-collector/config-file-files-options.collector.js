"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeWithDefaults = exports.collectConfigFileFileOptions = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const packgeJSON = __importStar(require("../../../../../package.json"));
const logger_1 = require("../../../helpers/logger");
const svg_optimization_1 = require("../../../helpers/svg-optimization");
const file_options_commander_1 = require("../../commander/file-options.commander");
const default_files_conversion_options_1 = require("../../default-options/default-files-conversion-options");
const collectConfigFileFileOptions = () => __awaiter(void 0, void 0, void 0, function* () {
    const explorerSync = (0, cosmiconfig_1.cosmiconfigSync)(packgeJSON.name);
    const configPath = (0, file_options_commander_1.getConfigPath)();
    const cosmiConfigResult = configPath ? explorerSync.load(configPath) : explorerSync.search();
    cosmiConfigResult
        ? logger_1.Logger.verboseInfo(`Configuration found under: ${cosmiConfigResult.filepath}`)
        : logger_1.Logger.verboseInfo('No config found');
    if (!cosmiConfigResult) {
        return null;
    }
    if (Array.isArray(cosmiConfigResult.config)) {
        return Promise.all(cosmiConfigResult.config.map((config) => (0, exports.mergeWithDefaults)(config)));
    }
    return yield (0, exports.mergeWithDefaults)(cosmiConfigResult.config);
});
exports.collectConfigFileFileOptions = collectConfigFileFileOptions;
const mergeWithDefaults = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const configOptions = Object.assign({}, options);
    if (configOptions.tsx === undefined) {
        configOptions.tsx = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.tsx;
        logger_1.Logger.verboseInfo(`No 'tsx' property provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.tsx}" will be used`);
    }
    if (configOptions.verbose === undefined) {
        configOptions.verbose = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.verbose;
        logger_1.Logger.verboseInfo(`No "verbose" property provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.verbose}" will be used`);
    }
    if (!configOptions.outputDirectory) {
        configOptions.outputDirectory = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.outputDirectory;
        logger_1.Logger.verboseInfo(`No outputDirectory provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.outputDirectory}" will be used`);
    }
    if (!configOptions.srcFiles) {
        configOptions.srcFiles = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.srcFiles;
        logger_1.Logger.verboseInfo(`No srcFiles provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.srcFiles}" will be used`);
    }
    if (!configOptions.svgoConfig) {
        configOptions.svgoConfig = yield (0, svg_optimization_1.getSvgoConfig)(configOptions.svgoConfig);
        logger_1.Logger.verboseInfo(`No svgoConfig provided, default configuration of SVGO will be used`);
    }
    if (!configOptions.delimiter) {
        configOptions.delimiter = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.delimiter;
        logger_1.Logger.verboseInfo(`No delimiter provided, "${configOptions.delimiter}" will be used`);
    }
    if (!configOptions.typeName) {
        configOptions.typeName = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.typeName;
        logger_1.Logger.verboseInfo(`No 'typeName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.typeName}" will be used`);
    }
    if (configOptions.generateType === undefined) {
        configOptions.generateType = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.generateType;
        logger_1.Logger.verboseInfo(`No 'generateType' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.generateType}" will be used`);
    }
    if (configOptions.generateTypeObject === undefined) {
        configOptions.generateTypeObject = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.generateTypeObject;
        logger_1.Logger.verboseInfo(`No 'generateTypeObject' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.generateTypeObject}" will be used`);
    }
    if (!configOptions.interfaceName) {
        configOptions.interfaceName = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.interfaceName;
        logger_1.Logger.verboseInfo(`No 'interfaceName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.interfaceName}" will be used`);
    }
    if (typeof configOptions.prefix !== 'string') {
        configOptions.prefix = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.prefix;
        logger_1.Logger.verboseInfo(`No 'prefix' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.prefix}" will be used`);
    }
    if (!configOptions.modelFileName) {
        configOptions.modelFileName = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.modelFileName;
        logger_1.Logger.verboseInfo(`No 'modelFileName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.modelFileName}" will be used`);
    }
    if (!configOptions.iconsFolderName) {
        configOptions.iconsFolderName = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.iconsFolderName;
        logger_1.Logger.verboseInfo(`No 'iconsFolderName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.iconsFolderName}" will be used`);
    }
    if (configOptions.compileSources === undefined) {
        configOptions.compileSources = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.compileSources;
        logger_1.Logger.verboseInfo(`No 'preCompileSources' flag provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.compileSources}" will be used`);
    }
    if (configOptions.exportCompleteIconSet === undefined) {
        configOptions.exportCompleteIconSet = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.exportCompleteIconSet;
        logger_1.Logger.verboseInfo(`No flag for 'exportCompleteIconSet' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.exportCompleteIconSet}" will be used`);
    }
    if (!configOptions.completeIconSetName) {
        configOptions.completeIconSetName = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.completeIconSetName;
        logger_1.Logger.verboseInfo(`No 'completeIconSetName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.completeIconSetName}" will be used`);
    }
    if (!configOptions.compilationOutput) {
        configOptions.compilationOutput = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.compilationOutput;
        logger_1.Logger.verboseInfo(`No 'completeIconSetName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.compilationOutput}" will be used`);
    }
    if (!configOptions.barrelFileName) {
        configOptions.barrelFileName = default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.barrelFileName;
        logger_1.Logger.verboseInfo(`No 'barrelFileName' provided, "${default_files_conversion_options_1.DEFAULT_FILES_CONVERSION_OPTIONS.barrelFileName}" will be used`);
    }
    return configOptions;
});
exports.mergeWithDefaults = mergeWithDefaults;
//# sourceMappingURL=config-file-files-options.collector.js.map