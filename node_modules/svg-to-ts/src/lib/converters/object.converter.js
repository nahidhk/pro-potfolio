"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToSingleObject = void 0;
const code_snippet_generators_1 = require("../generators/code-snippet-generators");
const file_helpers_1 = require("../helpers/file-helpers");
const logger_1 = require("../helpers/logger");
const monitor_1 = require("../helpers/monitor");
const file_type_model_1 = require("../shared/file-type.model");
const shared_converter_1 = require("./shared.converter");
function convertToSingleObject(conversionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { tsx } = conversionOptions;
        const svgDefinitions = yield (0, monitor_1.callAndMonitorAsync)(shared_converter_1.filesProcessor.bind({}, conversionOptions), 'Processing SVG files');
        if (tsx) {
            yield generateTSXFile(svgDefinitions, conversionOptions);
        }
        else {
            yield generateTSFile(svgDefinitions, conversionOptions);
        }
    });
}
exports.convertToSingleObject = convertToSingleObject;
function generateTSXFile(svgDefinitions, conversionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { outputDirectory, fileName, objectName } = conversionOptions;
        const fileContent = yield (0, monitor_1.callAndMonitorAsync)(generateTSXObject.bind({}, svgDefinitions, objectName, conversionOptions), 'Generate TSX Object');
        yield (0, monitor_1.callAndMonitorAsync)(file_helpers_1.writeFile.bind({}, outputDirectory, fileName, `${fileContent}`, file_type_model_1.FILE_TYPE.TSX), 'Write content to file');
        logger_1.Logger.generationSuccess(outputDirectory);
    });
}
function generateTSFile(svgDefinitions, conversionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { outputDirectory, objectName, fileName } = conversionOptions;
        const fileContent = yield (0, monitor_1.callAndMonitorAsync)(generateTSObject.bind({}, svgDefinitions, objectName, conversionOptions), 'Generate SVG Object');
        const typeDefinition = (0, monitor_1.callAndMonitor)(code_snippet_generators_1.generateTypeDefinition.bind({}, conversionOptions, svgDefinitions), 'Generate type definitions');
        yield (0, monitor_1.callAndMonitorAsync)(file_helpers_1.writeFile.bind({}, outputDirectory, fileName, `${fileContent}${typeDefinition}`), 'Write content to file');
        logger_1.Logger.generationSuccess(outputDirectory);
    });
}
function generateTSObject(svgDefinitions, objectName, conversionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const svgObject = {};
        svgDefinitions.forEach((svgDefinition) => (svgObject[svgDefinition.typeName] = svgDefinition.data));
        const typePatch = (0, code_snippet_generators_1.generateObjectInterface)(!objectName, conversionOptions);
        return !objectName
            ? `export default ${JSON.stringify(svgObject)}${typePatch}`
            : `export const ${objectName}${typePatch} = ${JSON.stringify(svgObject)}`;
    });
}
function generateTSXObject(svgDefinitions, conversionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { objectName } = conversionOptions;
        let svgObject = '';
        svgDefinitions.forEach((svgDefinition) => {
            const capitalizedTypeName = svgDefinition.typeName.charAt(0).toUpperCase() + svgDefinition.typeName.slice(1);
            svgObject += `${capitalizedTypeName}: () => (${svgDefinition.data}),\n`;
        });
        return !objectName ? `export default {${svgObject}}` : `export const ${objectName} = ${svgObject.toString()}`;
    });
}
//# sourceMappingURL=object.converter.js.map