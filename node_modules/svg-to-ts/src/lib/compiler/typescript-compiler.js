"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileToUMD = exports.renameJsFilesToMJs = exports.addMJsExtensionToImportStatements = exports.compileToEsNext = void 0;
const fs_1 = require("fs");
const ts = __importStar(require("typescript"));
const compileToEsNext = (filePaths, outputDir) => {
    const compilerOptionsNext = {
        resolveJsonModule: true,
        declaration: true,
        outDir: outputDir,
        moduleResolution: ts.ModuleResolutionKind.NodeJs,
        target: ts.ScriptTarget.ES2020,
        module: ts.ModuleKind.ESNext,
    };
    ts.createProgram(filePaths, compilerOptionsNext).emit();
    (0, exports.renameJsFilesToMJs)(outputDir);
    (0, exports.addMJsExtensionToImportStatements)(outputDir);
};
exports.compileToEsNext = compileToEsNext;
const addMJsExtensionToImportStatements = (outputDir) => {
    const children = (0, fs_1.readdirSync)(outputDir);
    if (children.length === 0) {
        return;
    }
    children.forEach((file) => {
        const path = `${outputDir}/${file}`;
        if ((0, fs_1.lstatSync)(path).isDirectory()) {
            (0, exports.addMJsExtensionToImportStatements)(path);
        }
        else {
            if (path.endsWith('.mjs')) {
                const content = (0, fs_1.readFileSync)(path, 'utf8');
                if (content) {
                    const contentWithExtensions = content.replace(/';/g, ".mjs';");
                    (0, fs_1.writeFileSync)(path, contentWithExtensions, 'utf8');
                }
            }
        }
    });
};
exports.addMJsExtensionToImportStatements = addMJsExtensionToImportStatements;
const renameJsFilesToMJs = (outputDir) => {
    const children = (0, fs_1.readdirSync)(outputDir);
    if (children.length === 0) {
        return;
    }
    children.forEach((file) => {
        const path = `${outputDir}/${file}`;
        if ((0, fs_1.lstatSync)(path).isDirectory()) {
            (0, exports.renameJsFilesToMJs)(path);
        }
        else {
            if (file.endsWith('.js')) {
                (0, fs_1.renameSync)(path, path.replace('.js', '.mjs'));
            }
        }
    });
};
exports.renameJsFilesToMJs = renameJsFilesToMJs;
const compileToUMD = (filePaths, outputDir) => {
    const compilerOptionsUMD = {
        declaration: true,
        outDir: outputDir,
        moduleResolution: ts.ModuleResolutionKind.NodeJs,
        target: ts.ScriptTarget.ES2020,
        module: ts.ModuleKind.UMD,
    };
    ts.createProgram(filePaths, compilerOptionsUMD).emit();
};
exports.compileToUMD = compileToUMD;
//# sourceMappingURL=typescript-compiler.js.map