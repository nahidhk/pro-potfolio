"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTypeHelperWithImport = exports.generateTypeHelper = exports.generateVariableName = exports.generateTypeName = exports.generateNamedImportStatement = exports.generateExportStatement = exports.generateTSXConstant = exports.generateSvgConstant = exports.generateEnumDefinition = exports.generateTypeDefinition = exports.generateObjectInterface = exports.generateInterfaceDefinition = exports.Delimiter = void 0;
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const lodash_kebabcase_1 = __importDefault(require("lodash.kebabcase"));
const lodash_snakecase_1 = __importDefault(require("lodash.snakecase"));
var Delimiter;
(function (Delimiter) {
    Delimiter["CAMEL"] = "CAMEL";
    Delimiter["KEBAB"] = "KEBAB";
    Delimiter["SNAKE"] = "SNAKE";
    Delimiter["UPPER"] = "UPPER";
    Delimiter["NONE"] = "NONE";
})(Delimiter = exports.Delimiter || (exports.Delimiter = {}));
const generateInterfaceDefinition = (conversionOptions) => {
    let { interfaceName, enumName = '', typeName = '', generateType, generateTypeObject, generateEnum, } = conversionOptions;
    let nameType = 'string';
    if (generateType || generateTypeObject) {
        nameType = typeName;
    }
    // Will rewrite nameType with enumName
    if (generateEnum) {
        nameType = enumName;
    }
    return `export interface ${interfaceName}{
        name: ${nameType};
        data: string;}`;
};
exports.generateInterfaceDefinition = generateInterfaceDefinition;
const generateObjectInterface = (exportAsDefaultObject, conversionOptions) => {
    const { generateType, typeName } = conversionOptions;
    const shouldAddTypeInfo = generateType && !!typeName;
    let typePatch = '';
    if (shouldAddTypeInfo) {
        const objectType = `{ [key in ${typeName}]: string }`;
        typePatch = exportAsDefaultObject ? `as ${objectType}` : `:${objectType}`;
    }
    return typePatch;
};
exports.generateObjectInterface = generateObjectInterface;
const generateTypeDefinition = (conversionOptions, svgDefinitions) => {
    let typesDefinition = '';
    if (conversionOptions.generateType) {
        typesDefinition += `
    export type ${conversionOptions.typeName} = ${svgDefinitions
            .map(({ typeName }, index) => `'${typeName}'${index === svgDefinitions.length - 1 ? '' : ' | '}`)
            .join('')};`;
    }
    if (conversionOptions.generateTypeObject) {
        typesDefinition += `
    export const ${conversionOptions.typeName} = {
      ${svgDefinitions
            .map(({ typeName }, index) => `'${typeName}': '${typeName}'${conversionOptions.generateType ? ` as ${conversionOptions.typeName}` : ''}${index === svgDefinitions.length - 1 ? '' : ','}`)
            .join('')}
    };`;
    }
    return typesDefinition;
};
exports.generateTypeDefinition = generateTypeDefinition;
const generateEnumDefinition = (conversionOptions, svgDefinitions) => {
    let enumDefinition = '';
    const { generateEnum, enumName } = conversionOptions;
    if (generateEnum) {
        enumDefinition += `
    export enum ${enumName} {${svgDefinitions
            .map(({ typeName }, index) => `${(0, lodash_snakecase_1.default)(typeName).toUpperCase()} = '${typeName}'${index === svgDefinitions.length - 1 ? '}' : ','}`)
            .join('')};`;
    }
    return enumDefinition;
};
exports.generateEnumDefinition = generateEnumDefinition;
const generateSvgConstant = (variableName, filenameWithoutEnding, data) => {
    return `export const ${variableName}: {
            name: '${filenameWithoutEnding}',
            data: string
          } = {
                name: '${filenameWithoutEnding}',
                data: \`${data}\`
            };`;
};
exports.generateSvgConstant = generateSvgConstant;
function generateTSXConstant(variableName, svg) {
    const variableNameCapitalized = variableName.charAt(0).toUpperCase() + variableName.slice(1);
    const svgStringWithProps = svg.replace('>', ' {...props}>');
    return `export const ${variableNameCapitalized} = (props: {[key: string]: any}) => (${svgStringWithProps});`;
}
exports.generateTSXConstant = generateTSXConstant;
const generateExportStatement = (fileName, generatedIconsFolderName) => {
    if (generatedIconsFolderName) {
        return `export * from './${generatedIconsFolderName}/${fileName}';`;
    }
    return `export * from './${fileName}';`;
};
exports.generateExportStatement = generateExportStatement;
const generateNamedImportStatement = (name, module) => `import {${name}} from '${module}';\n`;
exports.generateNamedImportStatement = generateNamedImportStatement;
const generateTypeName = (filenameWithoutEnding, delimiter, namePrefix) => {
    if (delimiter === Delimiter.CAMEL) {
        return `${namePrefix || ''}${(0, lodash_camelcase_1.default)(filenameWithoutEnding)}`;
    }
    if (delimiter === Delimiter.KEBAB) {
        return `${namePrefix || ''}${(0, lodash_kebabcase_1.default)(filenameWithoutEnding)}`;
    }
    if (delimiter === Delimiter.UPPER) {
        return `${namePrefix || ''}${(0, lodash_snakecase_1.default)(filenameWithoutEnding).toUpperCase()}`;
    }
    if (delimiter === Delimiter.NONE) {
        return `${namePrefix || ''}${filenameWithoutEnding}`;
    }
    return `${namePrefix || ''}${(0, lodash_snakecase_1.default)(filenameWithoutEnding)}`;
};
exports.generateTypeName = generateTypeName;
const generateVariableName = (prefix, filenameWithoutEnding) => {
    const camelCased = (0, lodash_camelcase_1.default)(filenameWithoutEnding);
    return prefix ? `${prefix}${capitalize(camelCased)}` : camelCased;
};
exports.generateVariableName = generateVariableName;
const generateTypeHelper = (interfaceName) => `
    export type ${interfaceName}NameSubset<T extends Readonly<${interfaceName}[]>> = T[number]['name'];
    `;
exports.generateTypeHelper = generateTypeHelper;
const generateTypeHelperWithImport = (interfaceName, iconsFolderName, modelFileName) => `
    import type {${interfaceName}} from './${iconsFolderName}/${modelFileName}';
    ${(0, exports.generateTypeHelper)(interfaceName)}
    `;
exports.generateTypeHelperWithImport = generateTypeHelperWithImport;
const capitalize = (value) => {
    return value.charAt(0).toUpperCase() + value.slice(1);
};
//# sourceMappingURL=code-snippet-generators.js.map