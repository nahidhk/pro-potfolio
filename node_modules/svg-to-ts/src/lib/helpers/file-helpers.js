"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteFiles = exports.deleteFolder = exports.readFile = exports.writeFile = exports.extractSvgContent = void 0;
const fs_1 = __importDefault(require("fs"));
const graceful_fs_1 = __importDefault(require("graceful-fs"));
const path_1 = __importDefault(require("path"));
const prettier = __importStar(require("prettier"));
const util_1 = __importDefault(require("util"));
const file_type_model_1 = require("../shared/file-type.model");
graceful_fs_1.default.gracefulify(fs_1.default);
const readfileFromFS = util_1.default.promisify(fs_1.default.readFile);
const writeFileToFS = util_1.default.promisify(fs_1.default.writeFile);
const fileComment = '/* ðŸ¤– this file was generated by svg-to-ts */\n';
const extractSvgContent = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    const fileContentRaw = yield readfileFromFS(filePath, 'utf-8');
    return fileContentRaw.replace(/\r?\n|\r/g, ' ');
});
exports.extractSvgContent = extractSvgContent;
function writeFile(outputDirectory, fileName, fileContent, fileType = file_type_model_1.FILE_TYPE.TS) {
    return __awaiter(this, void 0, void 0, function* () {
        const outputFile = path_1.default.join(outputDirectory, `${fileName}.${fileType}`);
        const formattedFileContent = fileType === file_type_model_1.FILE_TYPE.TS
            ? yield formatContent(`${fileComment}${fileContent}`, outputFile)
            : `${fileComment}${fileContent}`;
        if (!fs_1.default.existsSync(outputDirectory)) {
            fs_1.default.mkdirSync(outputDirectory, { recursive: true });
        }
        yield writeFileToFS(outputFile, formattedFileContent);
    });
}
exports.writeFile = writeFile;
const readFile = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    return readfileFromFS(filePath, 'utf-8');
});
exports.readFile = readFile;
const deleteFolder = (directoryPath) => __awaiter(void 0, void 0, void 0, function* () {
    if (fs_1.default.existsSync(directoryPath)) {
        fs_1.default.readdirSync(directoryPath).forEach((filePath) => {
            const curPath = directoryPath + '/' + filePath;
            if (fs_1.default.lstatSync(curPath).isDirectory()) {
                (0, exports.deleteFolder)(curPath);
            }
            else {
                fs_1.default.unlinkSync(curPath);
            }
        });
        fs_1.default.rmdirSync(directoryPath);
    }
});
exports.deleteFolder = deleteFolder;
const deleteFiles = (filePaths) => {
    filePaths.forEach((filePath) => fs_1.default.unlinkSync(filePath));
};
exports.deleteFiles = deleteFiles;
const formatContent = (fileContent, filePath) => __awaiter(void 0, void 0, void 0, function* () {
    // get the existing prettier config if it exists
    const existingPrettierConfig = yield prettier.resolveConfig(filePath);
    // if there is no existing prettier config, use our default config
    const defaultPrettierConfig = { singleQuote: true };
    const prettierConfig = existingPrettierConfig !== null && existingPrettierConfig !== void 0 ? existingPrettierConfig : defaultPrettierConfig;
    // ensure even if there is a parser set in the existing config we still use the typescript parser
    prettierConfig.parser = 'typescript';
    // use the existing prettier config along with the defaults to format the file content
    return yield prettier.format(fileContent, prettierConfig);
});
//# sourceMappingURL=file-helpers.js.map