#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// import-conductor-skip
const logger_1 = require("../lib/helpers/logger");
const object_options_collector_1 = require("../lib/options/options-collector/object-options.collector");
const object_converter_1 = require("../lib/converters/object.converter");
const object_options_commander_1 = require("../lib/options/commander/object-options.commander");
(() => __awaiter(void 0, void 0, void 0, function* () {
    (0, object_options_commander_1.setupObjectOptionsCommander)();
    logger_1.Logger.printWelcomeMessage();
    logger_1.Logger.info('Converting to an object');
    const conversionOptions = yield (0, object_options_collector_1.getObjectConversionOptions)();
    if (Array.isArray(conversionOptions)) {
        for (const c of conversionOptions) {
            logger_1.Logger.changeVisibility(c.verbose);
            yield (0, object_converter_1.convertToSingleObject)(c);
        }
    }
    else {
        logger_1.Logger.changeVisibility(conversionOptions.verbose);
        yield (0, object_converter_1.convertToSingleObject)(conversionOptions);
    }
}))();
//# sourceMappingURL=svg-to-ts-object.js.map