{
    "name": "svg-to-ts",
    "version": "12.0.0",
    "description": "Build amazing svg icon libraries",
    "main": "index.js",
    "scripts": {
        "build": "tsc",
        "commit": "git-cz",
        "bump-version": "rjp package.json version $VERSION",
        "contributors:add": "all-contributors add",
        "report:coverage": "echo 'not yet implemented'",
        "copy:readme": "copyfiles ./README.md ./dist",
        "format:check": "prettier --list-different 'src/**/*.ts'",
        "format:write": "prettier --write 'src/**/*.ts' && import-conductor -s 'src/**/*.ts' -i './src/bin/*.ts'",
        "prebuild": "npm run copy:readme",
        "start-object": "ts-node ./src/bin/svg-to-ts-object.ts -s './inputfiles/*.svg'",
        "start-object:tsx": "ts-node ./src/bin/svg-to-ts-object.ts -s './inputfiles/*.svg' --tsx true",
        "start-object:help": "ts-node ./src/bin/svg-to-ts-object.ts --help",
        "start-object:regex": "ts-node ./src/bin/svg-to-ts-object.ts -s 'inputfiles/*.svg'",
        "start-object:kebab": "ts-node ./src/bin/svg-to-ts-object.ts -s 'inputfiles/*.svg' -d KEBAB",
        "start-object:snake": "ts-node ./src/bin/svg-to-ts-object.ts -s 'inputfiles/*.svg' -d SNAKE",
        "start-object:camel": "ts-node ./src/bin/svg-to-ts.ts-object -s 'inputfiles-hyphen/*.svg' -d CAMEL",
        "start-object:upper": "ts-node ./src/bin/svg-to-ts.ts-object -s 'inputfiles-hyphen/*.svg' -d UPPER",
        "start-object:multiple-source": "ts-node ./src/bin/svg-to-ts-object -s './inputfilesRegex/laughing/laughing.svg' -s 'inputfilesRegex/expressionLess/expressionLess.svg'",
        "start-object:custom": "ts-node ./src/bin/svg-to-ts-object -s './inputfiles/*.svg' -o ./dist --objectName awesomeIcons -f icons",
        "start-object:generateType": "ts-node ./src/bin/svg-to-ts-object -s './inputfiles/*.svg' -o ./dist --objectName awesomeIcons --typeName MyIconType",
        "start-object:export-const": "ts-node ./src/bin/svg-to-ts-object.ts -s './inputfiles/*.svg' -o ./dist --objectName myIcons",
        "start-constants": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg'",
        "start-constants:tsx": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' --tsx true",
        "start-constants:help": "ts-node ./src/bin/svg-to-ts-constants.ts --help'",
        "start-constants:regex": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfilesRegex/**/*.svg'",
        "start-constants:kebab": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' -d KEBAB",
        "start-constants:snake": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' -d SNAKE",
        "start-constants:camel": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' -d CAMEL",
        "start-constants:upper": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' -d UPPER",
        "start-constants:multiple-source": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' -s 'inputfiles-hyphen/*.svg'",
        "start-constants:custom": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' -o ./dist -t sampleIcon -i SampleIcon -p sampleIcon -f icons",
        "start-constants:completeIconSet": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' --exportCompleteIconSet true",
        "start-constants:completeIconSetName": "ts-node ./src/bin/svg-to-ts-constants.ts -s './inputfiles/*.svg' --exportCompleteIconSet true --completeIconSetName myCompleteSet",
        "start-files": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg'",
        "start-files:tsx": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --tsx true",
        "start-files:help": "ts-node ./src/bin/svg-to-ts-files.ts --help",
        "start-files:invalid-path": "ts-node ./src/bin/svg-to-ts-files.ts -s './doesntExist/*.svg'",
        "start-files:barrel": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --barrelFileName public_api",
        "start-files:compile": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --compileSources true",
        "start-files:compile-esm": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --compileSources true --compilationOutput ESM",
        "start-files:compile-umd": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --compileSources true --compilationOutput UMD",
        "start-files:compile-esm-and-umd": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --compileSources true --compilationOutput ESM_AND_UMD",
        "start-files:compile-additionalPath": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' --compileSources true --additionalModelOutputPath ./additional",
        "start-files:regex": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfilesRegex/**/*.svg'",
        "start-files:kebab": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -d KEBAB",
        "start-files:snake": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -d SNAKE",
        "start-files:camel": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -d CAMEL",
        "start-files:upper": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -d UPPER",
        "start-files:multiple-source": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -s 'inputfiles-hyphen/*.svg'",
        "start-files:customModel": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfilesRegex/**/*.svg' --modelFileName test-model -t sampleIcon -i SampleIcon",
        "start-files:custom": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -o ./dist -t sampleIcon -i SampleIcon -p sampleIcon --modelFileName icons",
        "start-files:custom-complete-icon-set": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -o ./dist -t sampleIcon -i SampleIcon -p sampleIcon --modelFileName icons --exportCompleteIconSet true",
        "start-files:custom-complete-icon-set-name": "ts-node ./src/bin/svg-to-ts-files.ts -s './inputfiles/*.svg' -o ./dist -t sampleIcon --exportCompleteIconSet true --completeIconSetName 'all-icons'",
        "semantic-release": "semantic-release",
        "test": "jest --config=./jest.config.js --coverage"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/kreuzerk/svg-to-ts.git"
    },
    "husky": {
        "hooks": {
            "pre-commit": "pretty-quick --staged && import-conductor --staged",
            "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
    },
    "bin": {
        "svg-to-ts-files": "./src/bin/svg-to-ts-files.js",
        "svg-to-ts-constants": "./src/bin/svg-to-ts-constants.js",
        "svg-to-ts-object": "./src/bin/svg-to-ts-object.js"
    },
    "keywords": [
        "SVG",
        "TypeScript",
        "Icons",
        "Build-tool"
    ],
    "author": "Kevin Kreuzer",
    "license": "ISC",
    "bugs": {
        "url": "https://github.com/kreuzerk/svg-to-ts/issues"
    },
    "homepage": "https://github.com/kreuzerk/svg-to-ts#readme",
    "dependencies": {
        "chalk": "^3.0.0",
        "commander": "^4.0.1",
        "cosmiconfig": "^6.0.0",
        "glob": "^7.1.6",
        "graceful-fs": "^4.2.6",
        "lodash.camelcase": "^4.3.0",
        "lodash.kebabcase": "^4.1.1",
        "lodash.snakecase": "^4.1.1",
        "ora": "^5.1.0",
        "prettier": "^3.2.5",
        "svgo": "^3.0.2",
        "typescript": "^4.9.4"
    },
    "devDependencies": {
        "@commitlint/cli": "^18.6.1",
        "@commitlint/config-conventional": "^18.6.2",
        "@semantic-release/changelog": "^3.0.1",
        "@semantic-release/exec": "^3.3.2",
        "@semantic-release/git": "^7.0.6",
        "@types/graceful-fs": "^4.1.5",
        "@types/jest": "^24.0.23",
        "@types/node": "^12.12.8",
        "all-contributors-cli": "^6.17.2",
        "copyfiles": "^2.1.1",
        "cz-conventional-changelog": "^3.3.0",
        "husky": "^3.1.0",
        "import-conductor": "^2.0.3",
        "jest": "^24.9.0",
        "pretty-quick": "^4.0.0",
        "replace-json-property": "^1.4.1",
        "semantic-release": "^15.13.31",
        "ts-jest": "^24.2.0",
        "ts-node": "^8.5.2"
    },
    "config": {
        "commitizen": {
            "path": "./node_modules/cz-conventional-changelog"
        }
    }
}
